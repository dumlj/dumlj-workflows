name: Npm release actions
description: Release project to npm.
author: DavidJones

inputs:
  default_branch:
    description: 'specify default branch'
    required: false
    default: 'main'
  alpha_branch:
    description: 'specify branch to publish alpha version'
    required: false
    default: 'alpha'
  beta_branch:
    description: 'specify branch to publish beta version'
    required: false
    default: 'beta'

runs:
  using: "composite"
  steps:
    # 编译代码
    - name: Compile codes and build
      shell: bash
      run: npm run ci:build
    # 部署
    - name: Release to NPM
      shell: bash
      run: |
        # 删除远程不存在的分支
        git remote prune origin > /dev/null 2>&1
        # 同步远程Git状态
        git fetch --prune > /dev/null 2>&1

        # 提交的分支
        commit_branch=$(echo "${{ github.ref }}" | sed "s/refs\/heads\///")

        # 发布生产
        # 需要先登录 Git
        if [[ "$commit_branch" == "${{ inputs.default_branch }}" ]]; then
          # 获取最后的引用, Tag 或者为主分支
          latest_ref=$([[ -n "$(git tag -l)" ]] && git describe --tags --abbrev=0 || echo "origin/${{ inputs.default_branch }}")
          # 获取提交信息
          conventional_commits="$(git log "$latest_ref"..."origin/$commit_branch" --pretty=format:"%s" || echo "")"
          # 这里通过 conventional-commits 规范判断是否存在"功能"提交
          has_feat="$(echo -e "$conventional_commits" | grep -E "^(feat|perf):" && echo "1" || echo "0")"
          # 版本类型
          # 所有非"功能"更新均视为"补丁"
          ver_type="$([[ "$has_feat" == "1" ]] && echo "minor" || echo "patch")"

          # 切分支，当前 HEAD 正常来说应该等于默认分支，否则应该自动取消
          # 请保证 `interruptible: true` 在正式发布任务重声明
          git checkout ${{ inputs.default_branch }}

          # 修改版本号，这里会带提交，请确保登录 Git 并拥有修改权限
          commit_message="chore(release): [skip ci] release"
          npx lerna version $ver_type --message "$commit_message" --yes

          # 根据上一条命令更新的版本号发布新版到 npm
          npx lerna publish from-package --yes
        else
          # 根据分支名确定标签
          if [[ "$commit_branch" == "${{ inputs.alpha_branch }}" ]]; then
            tag="alpha"
          elif [[ "$commit_branch" == "${{ inputs.beta_branch }}" ]]; then
            tag="beta"
          fi

          if [[ -n "$tag" ]]; then
            # 设置版本号
            npx lerna version $tag --preid=$tag.$(git rev-parse --short HEAD) --no-git-tag-version --no-push --no-commit
            # 发布
            npx lerna --dist-tag $tag
          fi
        fi
